import java.util.Scanner;
import java.util.Arrays;
public class Median {

	public static final double MIN_INPUT=0.0;
	public static void main(String[] args) {
		System.out.print("Welcome to the median & rolling average system.");
		boolean finish=false;
		double[] allInputNumbers=new double[1];
		int length=-1;
		double[] temporaryNumbers= new double[1];
		double[]convertToString= new double[1];	
		do
		{ System.out.print("\nEnter a number (or enter quit):");
			Scanner input=new Scanner(System.in);
			double index= 1;
			
			if ( (input.hasNextDouble()))
			{   
				
			
				double currentNumber = input.nextDouble();
				
				length++;
				 allInputNumbers[length]=currentNumber;
				 temporaryNumbers[length]=currentNumber;
				 convertToString[length]=currentNumber;
				 
				if ((currentNumber >= MIN_INPUT))
				{
					int numberofvalues1=3;
					double median = computeMedian( temporaryNumbers );
					
					double runningAverage = computeRollingAverage( allInputNumbers,  numberofvalues1 );
					double[] sortedArray=  createSortedArray(temporaryNumbers);
					String convertedNumbers= convertToString(allInputNumbers);
					System.out.printf("The median of { "+convertedNumbers+" } is "+median+" and the rolling average of the last 3 values is %.1f",runningAverage);
				}
				allInputNumbers = extend(allInputNumbers , index , currentNumber);
			   temporaryNumbers= extendtemp(temporaryNumbers, index);
			   convertToString=extendconvertToString(convertToString, index);
			   
			}
			else if(input.hasNext("quit"))
			{
				finish= true;
			}
			else
			{
				System.out.print("Error - Enter any real number or quit.");
			}
			
				
			}while(finish!=true);
			
		}
	
	
	private static double[] extendconvertToString(double[] convertToString, double numberOfExtraCells) {
		// TODO Auto-generated method stub
		int cellsToAdd = (int) ((numberOfExtraCells>0) ?
				numberOfExtraCells:0);
				double[] newArray = new double[ (convertToString==null) ? cellsToAdd :
				convertToString.length+cellsToAdd];
				if (convertToString!= null)
				System.arraycopy( convertToString, 0, newArray, 0,
				convertToString.length );
				if (cellsToAdd != 0)
				for (int index=newArray.length-cellsToAdd;
				index<newArray.length; index++)
				newArray[index] = 0;
				return newArray;
				}
	


	private static double[] extendtemp(double[] temp, double numberOfExtraCells) {
		int cellsToAdd = (int) ((numberOfExtraCells>0) ?
				numberOfExtraCells:0);
				double[] newArray = new double[ (temp==null) ? cellsToAdd :
				temp.length+cellsToAdd];
				if (temp!= null)
				System.arraycopy( temp, 0, newArray, 0,
				temp.length );
				if (cellsToAdd != 0)
				for (int index=newArray.length-cellsToAdd;
				index<newArray.length; index++)
				newArray[index] = 0;
				return newArray;
				}
	


	

	private static double[] extend(double[] runningnumbers, double index, double currentNumber) {
		// TODO Auto-generated method stub
		
		int cellsToAdd = (int) ((index>0) ?
				index:0);
				double[] newArray = new double[ (runningnumbers==null) ? cellsToAdd :
				runningnumbers.length+cellsToAdd];
				if (runningnumbers!= null)
				System.arraycopy( runningnumbers, 0, newArray, 0,
				runningnumbers.length );
				if (cellsToAdd != 0)
				for (double index1=newArray.length-cellsToAdd;
				index1<newArray.length; index1++)
				newArray[(int) index1] = 0;
				return newArray;
				}


	

	public static String  convertToString(double[] runningnumbers) {
		// TODO Auto-generated method stub
		int size= runningnumbers.length;
		String[]convertedarray= new String[runningnumbers.length];
		for(int index=0; index<runningnumbers.length; index++)
		  convertedarray[index]=String.valueOf(runningnumbers[index]);
				
					
		
		    return (","+convertedarray);
	}

	public static double[] createSortedArray(double[] runningnumbers) {
		// TODO Auto-generated method stub
		 Arrays.sort(runningnumbers,0,runningnumbers.length);
		 return runningnumbers;
	}

	public static double computeRollingAverage(double[] runningnumbers,int numberofvalues1) {
		// TODO Auto-generated method stub
		 
		double[] rollingAverage= new double[(int) numberofvalues1];
		if(runningnumbers.length>numberofvalues1)
		{
		System.arraycopy(runningnumbers, (int)runningnumbers.length-numberofvalues1, rollingAverage, 0, numberofvalues1);
		double total=0;
		for (int index=0; index<numberofvalues1; index++)
			total += rollingAverage[index];
		return total/numberofvalues1;
		}
		else 
		{
			System.arraycopy(runningnumbers, 0, rollingAverage, 0, runningnumbers.length);
		
		int total=0;
		for (int index=0; index<runningnumbers.length; index++)
			total += runningnumbers[index];
		return total/runningnumbers.length;
		}
	}

	public static double computeMedian(double[] runningnumber)
	{
		if(runningnumber==null)
		return 0.0;
		createSortedArray(runningnumber);
		if(runningnumber.length%2==0)
		{
			return (double)(runningnumber[(runningnumber.length - 1) / 2] + runningnumber[runningnumber.length / 2]) / 2.0;
		}
		else
		{
			return (double)runningnumber[(int)runningnumber.length / 2];
		
		}
		
	}
	

}
